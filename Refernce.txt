******************************************************** Spring JPA **************************************************************
@Lob -> it is used specify for the CLOB and BLOB Objects. By default JPA/HIBERNATE have limitations on the string length. this annotation will prepare to expect large size.

In ase of @OneToMany, we have a property called mappedBy to specify where the property being used in the other table

For enumeration we have a annotation to specify it @Enumerated(value=EnumType.STRING)
By default EnumType is ordinal meaning it will store integers such as 1, 2, 3 instead of strings. if we specify strings it will store actual values

hibernate.ddl-auto has 5 options. which are
None- won't perform anything
validate - it will validate JPA Entities against Database entities
Update - it will update or run the DDL Commands if there is change in tables
Create - it will create the DDL commands
create-drop -> it will create and drop all the content at the time of DB Shutdown.

Spring-boot uses create-drop option for embedded Databases, for others it is none

we have to enable the below annotations when we have multi module project

@EntityScan("com.ma.petclinicdata.model")
@EnableJpaRepositories("com.ma.petclinicdata.repository")

Project Lombok
********************
Lombok @Data will give stackoverflow error when it finds bi-directional refs. 
because it will create circular refs leading to stackoverflow
Solution -: exclude them    

**********************************************************JUNIT*******************************************************
Junit5 is designed to work with JAVA8 or higher. however it comes with vintage to support backward comaptibility

We can verify how many times a particular method is getting called by 
Mockito.verify(this.recipeRepository, Mockito.times(1)).findAll();

We can also capture the argument supplied to the methods which get called internally by ArgumentCaptor
//prepare 
ArgumentCaptor<Set<Recipe>> argumentCapture = ArgumentCaptor.forClass(Set.class);
// call main method
String indexPage = this.controller.getIndexPage(this.model);
// capture arguments
Mockito.verify(this.model, Mockito.times(1)).addAttribute(Mockito.eq("recipes"), argumentCapture.capture());
//validate 
Set<Recipe> allValues = argumentCapture.getValue();
assertEquals(2, allValues.size());

**************************************Spring MVC Testing****************************************************************
Spring has provided ability to mock Dispatcher Servlets to test Spring MVC applications.

Works based on MockServletContext given Spring team

MockMvc mockMvc = MockMvcBuilders.standaloneSetup(this.controller).build();
		
mockMvc.perform(MockMvcRequestBuilders.get("/")).andExpect(MockMvcResultMatchers.status().isOk()).andExpect(MockMvcResultMatchers.view().name("index"));
		
**********************************************Integration Testing*************************************************************
Mavne-surefire-plugin is the the actual plugin which will run the actual unit-tests. it is enabled by default

To run integration testing we need maven-filesafe-plugin. Here the include optional will tell what are integration test cases are

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<includes>
						<include>**/*ITTest.java</include>
					</includes>
					<parallel>none</parallel>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
If the above plugin is not working add <additionalClasspathElements> with ${basedir}/target/classes.

If we set JUNIT 5 manually that is by adding jupiter-api and jupiter.engine as dependencies, then we have add Maven build plugin for sunfire and need to pass junit-platform-surefire-provider as dependency.

*****************************************Mockito JUNIT 5******************************************************************

In Junit5 Mockito works bit different. We have to give @ExtendWith(MockitoExtension.class) on top of the class name

@InjectMocks will instantiate the object and inject the objects which are annotated with @MockMvc

When something is void, we should call verify whether it is hitting the method or not

Mockito.verify(this.ownerRepository, times(1)).delete(Mockito.any(Owner.class));

****************************************************************Command Beans(Backing Bean)**********************************************************************************

1. Spring will translate the POJO coming from web page into the java bean if it has same property names by using reflection mechanism.

Web Data Binders -:
*******************************************
1. Web data binders controls the data conversion or POJO mapping coming from command objects or from UI.

@InitBinder
	public void showAllowedFields(WebDataBinder webDataBinder) {
		webDataBinder.setDisallowedFields("id");
	}
	
the above code will not allow user to modify the id field.

in this case we have to pass the id variable with @Pathvariable in order to update the things as thw main object will come witout Id

@ModelAttribute("owner") -> it will populate the values for the defined attributes whenever any call come to that particular controller.

@ModelAttribute("types")
	public Collection<PetType> populatePetTypes() {
		return this.petTypeService.findAll();
	}
	
this will populate all the pet types into types 


********************************************************************HTTP Status Codes****************************************************************************
100 series -> INFO Messages
200 series -> Success Message
300 series -> redirection
400 series -> Not allowed or client side errors
500 series -> server side errors

HTTP 500 -> Internal Server error
Generally any unhandled exception on server side

400 Bad Requests -> can not process the data input due to client error (Invalid Data)
401 Unauthorized -> Authentication Required
403 Forbidden Authentication to the required source
404 Not Found -> Resource Not found 
405 Method not allowed - HTTP Method not allowed. (in case of get method doing post)
406 Not acceptable 
409 Conflict -> Possible with simultaneous updates
417 Exception failed -> if something is posted back without some fileds
423 Locked
449 Retry with
500 internal server error
503 Service unavailable
509 File excedded
599 Network timeout

By using Controller Advice, we can set up an exception at global level
 
 
 
*********************************************************Docker***************************************************************

Docker runs inside Linux Container and they are very much linux centric
1.To list all the images docker images -a
2. docker image prune -a --force --filter "until=240h" it will remove all the images in last 10 days that is 240h
3. docker images prune -a (all) -> it will remove all the images
4. to know the running processes -> docker ps
5. to list out all the containers -> docker ps -a
6. to tun mongo with port enabling for the application -> docker run -p 27017:27017 -d mongo (-d deamon to run it in the background)
7. to check logs docker logs -f [container ID Name]

8. to see the layers -> docker image inspect mongo
9. To see full hashcode -> docker images -q --no--trunc
10. on doing docker images -> it will give first 12 hash code characters

11. To look at the history by using keyword histroy | grep mongo

12. to map the container to use host resources  docker run -p 27017:27017 -v /users/manojkumara/data/db:/data/db -d mongo
(-v for volume)

13. For setting mysql docker run --name ma-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v /users/manojkumara/Dmysql:/var/lib/mysql -p 3306:3306 -d mysql

here -e for environment variables

To make centos image run continuously use the command -: docker run -d centos tail -f /dev/null
here f is follow    

by bashing on running centos, we can install java by using the command -> yum install java

FROM centos

RUN yum install -y java

VOLUME /tmp
ADD target/recipe-app-0.0.1-SNAPSHOT.jar myapp.jar
RUN sh -c 'touch /myapp.jar'
ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/ ./urandom", "-jar", "/myapp.jar"]

sample docker file

FROM openjdk:8
WORKDIR /app
ADD target/esp-otx-service-2.0.0.jar /app
ADD ./gcp_credentials.json /app
ADD src/main/resources/application.properties /app
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "esp-otx-service-2.0.0.jar", "--spring.config.location", "/app/application.properties"]
